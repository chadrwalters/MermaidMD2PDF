name: CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  release:
    types: [published]
  workflow_dispatch: # Allow manual runs
  schedule:
    - cron: "0 0 * * 1" # Run security scans weekly

permissions:
  security-events: write
  contents: read

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            .venv
            ~/.cache/uv
          key: ${{ runner.os }}-python-3.11-lint-deps-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-python-3.11-lint-deps-

      - name: Create virtual environment and install dependencies
        run: |
          uv venv
          uv pip install -e ".[dev]"
        working-directory: ${{ github.workspace }}

      - name: Run linters
        run: |
          uv run ruff check .
          uv run mypy src/
        working-directory: ${{ github.workspace }}

  test:
    needs: [lint]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc texlive-xetex
          npm install -g @mermaid-js/mermaid-cli

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            .venv
            ~/.cache/uv
          key: ${{ runner.os }}-python-${{ matrix.python-version }}-deps-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ matrix.python-version }}-deps-

      - name: Create virtual environment and install dependencies
        run: |
          uv venv
          uv pip install -e .
          uv pip install ".[dev]"
          uv pip install pytest-cov
        working-directory: ${{ github.workspace }}

      - name: Check Python environment
        run: |
          source .venv/bin/activate
          python --version
          which python
          echo "PYTHONPATH: $PYTHONPATH"
          echo "Current directory: $(pwd)"
          ls -la
          python -c "import sys; print('Python path:', sys.path)"
          python -c "import mermaidmd2pdf; print('Package found at:', mermaidmd2pdf.__file__)"
        working-directory: ${{ github.workspace }}

      - name: Run tests with coverage
        run: |
          source .venv/bin/activate
          python -m pytest -vl \
            --cov=mermaidmd2pdf \
            --cov-report=xml \
            --cov-report=term \
            tests/
        working-directory: ${{ github.workspace }}

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true

  build:
    needs: [test]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Create virtual environment and install build dependencies
        run: |
          uv venv
          uv pip install build twine
        working-directory: ${{ github.workspace }}

      - name: Build package
        run: |
          uv run python -m build
        working-directory: ${{ github.workspace }}

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          uv run twine upload dist/*
        working-directory: ${{ github.workspace }}

  docs:
    needs: [lint, test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      - name: Create virtual environment
        run: |
          uv venv
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            .venv
            ~/.cache/uv
          key: ${{ runner.os }}-python-3.11-docs-deps-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-python-3.11-docs-deps-
      - name: Install dependencies
        run: |
          uv pip install mkdocs-material mkdocstrings[python] pymdown-extensions
      - name: Build and deploy documentation
        run: |
          uv run mkdocs gh-deploy --force
