name: CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  release:
    types: [published]
  schedule:
    - cron: "0 0 * * 1" # Run security scans weekly

jobs:
  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      - name: Create virtual environment
        run: |
          uv venv
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            .venv
            ~/.cache/uv
          key: ${{ runner.os }}-python-3.11-lint-deps-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-python-3.11-lint-deps-
      - name: Install dependencies
        run: |
          uv pip install black isort mypy ruff pre-commit
      - name: Run linters
        run: |
          uv run black --check .
          uv run isort --check .
          uv run mypy src/
          uv run ruff check .
          uv run pre-commit run --all-files

  test:
    needs: [lint, security]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc texlive-xetex
          npm install -g @mermaid-js/mermaid-cli
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      - name: Create virtual environment
        run: |
          uv venv
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            .venv
            ~/.cache/uv
          key: ${{ runner.os }}-python-${{ matrix.python-version }}-deps-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ matrix.python-version }}-deps-
      - name: Install Python dependencies
        run: |
          uv pip install -e ".[dev]"  # Install package first with all dev dependencies
          uv pip install pytest-cov  # Only install additional test dependencies
          uv pip freeze  # For debugging
      - name: Run tests
        run: |
          uv run python -m pytest --cov=mermaidmd2pdf tests/
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true

  build:
    needs: [lint, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      - name: Create virtual environment
        run: |
          uv venv
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            .venv
            ~/.cache/uv
          key: ${{ runner.os }}-python-3.11-build-deps-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-python-3.11-build-deps-
      - name: Install build dependencies
        run: |
          uv pip install build twine
      - name: Build package
        run: |
          uv run python -m build
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          uv run twine upload dist/*

  docs:
    needs: [lint, test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      - name: Create virtual environment
        run: |
          uv venv
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            .venv
            ~/.cache/uv
          key: ${{ runner.os }}-python-3.11-docs-deps-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-python-3.11-docs-deps-
      - name: Install dependencies
        run: |
          uv pip install mkdocs-material mkdocstrings[python] pymdown-extensions
      - name: Build and deploy documentation
        run: |
          uv run mkdocs gh-deploy --force
